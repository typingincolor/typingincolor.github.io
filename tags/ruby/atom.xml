<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ruby | The Land of Shattered Dreams]]></title>
  <link href="http://www.landofshattereddreams.com/tags/ruby/atom.xml" rel="self"/>
  <link href="http://www.landofshattereddreams.com/"/>
  <updated>2014-12-24T10:28:56+00:00</updated>
  <id>http://www.landofshattereddreams.com/</id>
  <author>
    <name><![CDATA[Andrew Braithwaite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maneuverable Web Architecture]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2014/04/11/maneuverable-web-architecture/"/>
    <updated>2014-04-11T11:19:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2014/04/11/maneuverable-web-architecture</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/typhoon.jpeg">
One of my colleagues attend QCon London and saw a presentation by <a href="http://www.michaelnygard.com/">Michael Nygard</a>
on <a href="http://gotocon.com/berlin-2013/presentation/Maneuverable%20Web%20Architecture">Maneuverable Web Architecture</a>. A few of us got together and watched it and
it got us thinking…</p>

<p>Businesses need to be able to move quickly, and some of the established architectural
patterns stop them doing this. The presentation contained lots of ideas but I am going
to concentrate on one: sending an email to a customer.</p>

<p>The traditional approach is for the application sending the email to write to a
database saying who the email is to goto, when to send it and the data to be included
in the email. A batch job wakes up, scans the database for emails to send, builds them
and then sends them on.</p>

<p>This approach works well, loads of people have done it, and it is pretty easy to
implement. There are some problems though: changing things can be difficult; you have
to make sure that you don’t break any of the queued emails whenever you make a change.
The solution isn’t very flexible either, it is good for sending emails but if you want
to do something else you will have to revisit your entire solution.</p>

<p>Is there a better way? Michael proposed this approach. When I first saw it I thought
it was a bit crazy, but I had a go at implementing it and it has a lot going for it…</p>

<p>We first create a few components:</p>

<ul>
  <li><strong>at service</strong> - this service calls a specified url at a given point in time</li>
  <li><strong>script engine</strong> - this service is passed a script and executes it</li>
  <li><strong>script factory</strong> - this service builds scripts for the script engine to execute</li>
</ul>

<p>How does this let us send an email to a customer?</p>

<ul>
  <li>the client sending the email says to the script factory: “Give me an email sending script”</li>
  <li>the script factory builds the script and passes a url to execute the script to the client</li>
  <li>the client says to the at service: “Call this url now”</li>
  <li>the at service calls the url, and the script engine executes the script</li>
  <li>the script does everything required to send an email to the customer</li>
</ul>

<p>How is this better?</p>

<ul>
  <li>The at service just calls urls at a point in time, you can use it for anything</li>
  <li>If the you add new functionality you can just deploy a new script engine and script factory
on a different url. All the exisitng scripts will still work, any new scripts will go to the new
versions. If you want to add email tracking, change the script factory to include
it and then all new scripts will have email tracking. All the old scripts will still work.</li>
  <li>All clients are doing is asking for a script and scheduling them. You
can write scripts to do anything you can think of…</li>
</ul>

<p>I am glossing over some of the problems… The script engine is non-trivial, error
handling seems complicated and it takes some explaining to developers.</p>

<p>If your interested I had a go at implementing the approach, you can see the results on <a href="http://github.com/typingincolor/typhoon">github</a>.
It is by no means production ready, but you can kind of see how it could work…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying haml, coffeescript, ruby and sinatra]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/31/trying-haml-coffeescript-ruby-and-sinatra/"/>
    <updated>2012-05-31T18:22:51+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/31/trying-haml-coffeescript-ruby-and-sinatra</id>
    <content type="html"><![CDATA[<p>I am looking at ways that I can build a web front-end for a system I am going to develop at work. Basically, I want to have a number of web services that will provide the data and then write a front end in html and java script to consume these services and display the data to a user.</p>

<p>I’m not a javascript expert, can do a bit of html and really didn’t want to do use java as it isn’t the quickest thing develop a prototype.</p>

<p>In the end I chose <a href="http://www.sinatrarb.com/">Sinatra</a>, a DSL for quickly creating web applications in Ruby with minimal effort. It is stupidly easy to create a web application! For example:</p>

<p>``` ruby
require ‘sinatra’</p>

<p>get ‘/hi’ do
    “Hello World!”
```</p>

<p>Will return “Hello World!” when you go to http://localhost:4567/hi. I used the ROXML gem to squirt out an xml representation of a ruby object and I had a web service in around 30 lines of ruby.</p>

<p>So I had my web service up and running. Now to consume it… As I’ve mentioned before, I like <a href="http://twitter.github.com/bootstrap/">bootstrap</a> as it is really easy to write a good looking interface without having to know loads of CSS. HTML is ok, but it can look a bit of a mess, so I decided to use <a href="http://haml.info/">Haml</a>. It gets transformed into html, but it makes your markup look beautiful. Using it you have to go out of your way to write nasty html. Indentation is significant (a la python) so you have to right it neatly!</p>

<p>The final piece of the jigsaw is <a href="http://coffeescript.org/">coffeescript</a>, a little language that compile into javascript. The aim of coffeescript is to expose the good bits of javascript in a simple way. I like it because it removes the need for endless curly brackets and the function keyword.</p>

<p>All in all, I’m pretty pleased with the results. None of it is earth shattering, but the progress bars are pretty neat and I like the way I’ve built the results table.</p>

<p>If you want to see the code, you can clone it using git </p>

<p><code>
    git clone https://bitbucket.org/typingincolor/ajax-prototype.git
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAGNI]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/03/25/yagni/"/>
    <updated>2011-03-25T00:02:37+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/03/25/yagni</id>
    <content type="html"><![CDATA[<p>YAGNI or You Ain’t Going To Need It - the battle cry of the committed agilista. Software developers, myself included, have a rather annoying tendency to over engineer their solutions. We sit there thinking that with a little bit of extra effort we can build a framework or make the code easily extensible so that when the next problem comes along it will take us no time at all to build a solution.</p>

<p>There just two problems:</p>

<ul>
  <li>It never takes a little bit of effort</li>
  <li>The “extensible” code you build is never that extensible - it never fits tomorrow’s problem</li>
</ul>

<p>Hence YAGNI! You build enough to solve today’s problem, and worry about tomorrow’s problem tomorrow.</p>

<p>Why am I blogging about YAGNI? As <a href="http://typingincolor.com/2011/03/andrew-braithwaite/my-first-rails-app/">previously mentioned</a> I have been writing a skills matrix application for work so I can track the level of skill in my team over time. I have high hopes of building an all singing, all dancing system in ruby on rails that will be all things to all men. Unfortunately, I want to know what we know today not in six months. So I built a version that did the bare minimum and released it. I started with collecting the data, I’ve now added a report and will start tracking changes next. I’ve not really worried about how I’m going to build the new functionality and I’m hoping it will all come out in the wash.</p>

<p>Now I could be wrong about YAGNI, it may turn out that I did need it after all. But if worst comes to the worst, I’ve got the data, I’ve learnt a lot of ruby and the next version of skillz will be better. I’m pretty confident I can make it all work, and I’m really good a data migrations if it doesn’t. I can always use Excel if I have to…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Rails App...]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/03/17/my-first-rails-app/"/>
    <updated>2011-03-17T00:13:53+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/03/17/my-first-rails-app</id>
    <content type="html"><![CDATA[<p><a href="http://rubyonrails.org"><img class="left" src="/images/logos/rails.png"></a>
I have worked in IT for the best part of 15 years, most of that in technical roles. I started as a Trainee Programmer in the IT department of a large bank, and have ended up as the Head of Development at at one of the UK’s fastest growing technology companies. When I started work I developed in C and a 4GL called  OpenROAD, and I was pretty good at them…</p>

<p>I started using Java in around 1999, back when applets were still used. I quite liked it, and I’ve used it pretty much ever since. I last worked on a C project in 2000, I could probably remember how to compile a program if I had to, but I suspect I would just cause servers to core dump if I was allowed any where near them now.</p>

<p>I’ve not really written any  serious code at work for probably 18 months and to be honest, doing anything in Java doesn’t really appeal as I’ve been there and done that.</p>

<p>One of the things I want to do is get a picture of how much my team actually know and then track any improvement over time. One of my colleagues produced a skills matrix for his team where there is a list of skills, and everybody gives themselves a score from 0 to 4 based on how they perceive their skill level. It is a really useful tool when you collate all the data, and I thought I’d have some of that.</p>

<p>Now, my colleague did his skills matrix using Excel; but as a one-time code monkey I thought it would be a good excuse to dust off the old development skills and build a web application to do it.</p>

<p>I looked at a few options to build the app. Groovy on Grails and the Play framework are basically java, and I really can’t be bothered with that; so in the end I went for Ruby on Rails.</p>

<p><a href="http://www.ruby-lang.org/en/"><img class="left" src="/images/logos/ruby.gif"></a>
I quite like Ruby as  a language. It is weakly typed which makes things a lot easier and the syntax pretty easy to follow. Rails as development framework is ridiculously easy. I have written less than 100 lines code to build the app. The hardest part was the css so that it didn’t look like a dogs dinner. I’m not sure I am entirely in favour of how easy it is, there is a bit to much magic for my liking; things work when I think they shouldn’t and then I spend 10 minutes working out why it works. All-in-all though it has been a pretty enjoyable experience.</p>

<p>There are a few things a really do like though:</p>

<ul>
  <li>
    <p><a href="http://haml.info">haml</a> - I didn’t really see the point at first. It is a templating framework to generate html. You still need to really understand html (this is why I didn’t see the point), but it does make you write properly formatted code. It also stops you doing some of the more horrible things you can do in jsps or erb.</p>
  </li>
  <li>
    <p><a href="http://www.sourcetreeapp.com/">sourcetree</a> - it’s a client for git (and mercurial) for OS X and it makes it soooo much easier. Git is a brilliant source control tool, and sourcetree makes it really easy. I know the guy who developed it and he’s done a great job on it.</p>
  </li>
  <li>
    <p><a href="http://www.heroku.com/">heroku</a> - makes it stupidly easy to deploy your rails app to a production environment. You just push you git repo up to it and it just works. If only java was so easy.</p>
  </li>
</ul>

<p>Maybe it is time for me to stop going to meetings, planning projects and get with the program and do some proper development. Skillz version 1 (great name eh?) will be unleashed on the development team next week, and I’m already planning the features for version 2.</p>

<p>The one fly in the ointment is that Rails development on Windoze truly sucks. Git doesn’t work properly, the tools suck, windoze sucks and the whole experience is just rubbish. If you’re going to do Rails buy a mac.</p>
]]></content>
  </entry>
  
</feed>
