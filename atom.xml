<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Land of Shattered Dreams]]></title>
  <link href="http://www.landofshattereddreams.com/atom.xml" rel="self"/>
  <link href="http://www.landofshattereddreams.com/"/>
  <updated>2014-11-24T13:59:28+00:00</updated>
  <id>http://www.landofshattereddreams.com/</id>
  <author>
    <name><![CDATA[Andrew Braithwaite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maneuverable Web Architecture]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2014/04/11/maneuverable-web-architecture/"/>
    <updated>2014-04-11T11:19:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2014/04/11/maneuverable-web-architecture</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://www.landofshattereddreams.com/images/typhoon.jpeg" />
One of my colleagues attend QCon London and saw a presentation by <a href="http://www.michaelnygard.com/">Michael Nygard</a>
on <a href="http://gotocon.com/berlin-2013/presentation/Maneuverable%20Web%20Architecture">Maneuverable Web Architecture</a>. A few of us got together and watched it and
it got us thinking…</p>

<p>Businesses need to be able to move quickly, and some of the established architectural
patterns stop them doing this. The presentation contained lots of ideas but I am going
to concentrate on one: sending an email to a customer.</p>

<p>The traditional approach is for the application sending the email to write to a
database saying who the email is to goto, when to send it and the data to be included
in the email. A batch job wakes up, scans the database for emails to send, builds them
and then sends them on.</p>

<p>This approach works well, loads of people have done it, and it is pretty easy to
implement. There are some problems though: changing things can be difficult; you have
to make sure that you don’t break any of the queued emails whenever you make a change.
The solution isn’t very flexible either, it is good for sending emails but if you want
to do something else you will have to revisit your entire solution.</p>

<p>Is there a better way? Michael proposed this approach. When I first saw it I thought
it was a bit crazy, but I had a go at implementing it and it has a lot going for it…</p>

<p>We first create a few components:</p>

<ul>
  <li><strong>at service</strong> - this service calls a specified url at a given point in time</li>
  <li><strong>script engine</strong> - this service is passed a script and executes it</li>
  <li><strong>script factory</strong> - this service builds scripts for the script engine to execute</li>
</ul>

<p>How does this let us send an email to a customer?</p>

<ul>
  <li>the client sending the email says to the script factory: “Give me an email sending script”</li>
  <li>the script factory builds the script and passes a url to execute the script to the client</li>
  <li>the client says to the at service: “Call this url now”</li>
  <li>the at service calls the url, and the script engine executes the script</li>
  <li>the script does everything required to send an email to the customer</li>
</ul>

<p>How is this better?</p>

<ul>
  <li>The at service just calls urls at a point in time, you can use it for anything</li>
  <li>If the you add new functionality you can just deploy a new script engine and script factory
on a different url. All the exisitng scripts will still work, any new scripts will go to the new
versions. If you want to add email tracking, change the script factory to include
it and then all new scripts will have email tracking. All the old scripts will still work.</li>
  <li>All clients are doing is asking for a script and scheduling them. You
can write scripts to do anything you can think of…</li>
</ul>

<p>I am glossing over some of the problems… The script engine is non-trivial, error
handling seems complicated and it takes some explaining to developers.</p>

<p>If your interested I had a go at implementing the approach, you can see the results on <a href="http://github.com/typingincolor/typhoon">github</a>.
It is by no means production ready, but you can kind of see how it could work…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures in OAuth2]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2014/03/17/adventures-in-oauth2/"/>
    <updated>2014-03-17T09:01:00+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2014/03/17/adventures-in-oauth2</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://www.landofshattereddreams.com/images/logos/oauth-2-sm.png" />
I’ve not been able to blog for a while as a lot of things have been going on.
In November I left <a href="http://www.morrisons.co.uk">Morrisons</a> to take a Solutions Architect role at <a href="http://www.laterooms.com">Laterooms</a>
and it has taken me a while to get settled in and to work out what’s going on.</p>

<p>One of the things I am looking at for Laterooms is how we use APIs to power our
platform. We’ve developed <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful APIs</a> that are used by our mobile applications
but we can do a whole lot more with our APIs. Long term, I’d like to build our entire
platform on APIs using them as the base for our mobile apps, the websites and our
integration with affiliates and hotel providers. We’ve got a long way to go, but
I guess a journey of a thousand miles begins with a single step.</p>

<p>One of the key considerations we have when designing our API platform is controlling
who has access to our data. We want to build a platform capable of allowing <em>authorized</em>
consumers unlimited access to Lateroom’s data. Note <em>authorized</em> consumers, some data
is public and we want to make it as easy as possible to access it; some data is
most definitely not public and access to it has to be limited.</p>

<p>To help us control access to our APIs I have been looking at various API management
platform and how they implement OAuth2 to provide authorized access to an API. The
three I talk about in this post are from <a href="http://www.apigee.com">Apigee</a>, <a href="http://www.mashery.com">Mashery</a> and <a href="http://www.mulesoft.com">Mulesoft</a>.</p>

<h3 id="oauth2">OAuth2</h3>
<p>Before we start I supose it is worth talking a bit about <a href="http://oauth.net/2/">OAuth2</a>. To quote <a href="http://en.wikipedia.org/wiki/OAuth">wikipedia</a>:</p>

<blockquote>
  <p>OAuth is an open standard for authorization. OAuth provides a method for clients
to access server resources on behalf of a resource owner such as a different
client or an end-user. It also provides a process for end-users to authorize
third-party access to their server resources without sharing their credentials,
typically a username and password pair, using user-agent redirections.</p>
</blockquote>

<p>The OAuth2 <a href="http://tools.ietf.org/html/rfc6749">spec</a> is a long and complicated document with many, many options.
To compare the three management platforms I built a simple API hosted on <a href="https://heroku.com/">Heroku</a>.
I also wrote a simple client web app that consumed the API again hosted on Heroku.
Finally I wired in each of the API management platforms to protect the API and
to ensure only authenticated users could use the client.</p>

<p>I used the “Authorization Code” flow to authenticate and authorise the client users,
which means that the client does not need any knowledge of the user’s credentials
and all the authentication and authorization is done on the API side.</p>

<p>At a high level, every API request by the client requires an access token to call a
protected resource. The steps to get an access token are:</p>

<ul>
  <li>the user authenticates themselves using a web application hosted on the API side</li>
  <li>the client application is passed an authorization code via a callback method.
The client exchanges this code for an access token, authenticating itself with a
client ID and secret.</li>
  <li>the client attaches the access token to any API calls</li>
</ul>

<p>Each of the API management platform achieves this in a slightly different way.</p>

<h3 id="mashery">Mashery</h3>
<p>To implement the flow in Mashery I wrote a simple node app that presented a user
a screen to enter their username and password and which validated them. The user
clicks on a link in the client app and is taken to this validation screen.</p>

<p>If the validation succeeds the web app uses a Mashery API to generate an authorization
code and this is passed back to the client via it’s callback url. The client makes a call
to a “token” endpoint configured in the Mashery API and which responds with an access token.
This token is passed with every subsequent API call and the Mashery platform ensures that
it is valid.</p>

<p>This is the implementation I tried last, and it took me very little effort to
change the code a developed using Apigee to work with Mashery.</p>

<h3 id="apigee">Apigee</h3>
<p>Apigee’s approach is slightly different to Mashery. I had to expose three
endpoints in Apigee. The first endpoint redirects to the login application where
the user enters their details. If the details are correct, the login app calls
the second endpoint which generates an authorization code and passes it to the
client app via its callback url. The client then uses the third endpoint to
exchange the code for an access token.</p>

<p>It took me a while to remember how OAuth works, but once I had that the example
from Apigee was easy to follow and I got things up and running pretty quickly.</p>

<h3 id="mulesoft">Mulesoft</h3>
<p>Mulesoft is a relatively new player in the API management space, primarily being
known for their ESB.The biggest difference between the the solution I built with
this and the others was that Mulesoft provided the login application, with no
ability to develop your own. It is relatively simple to plug this login app
into an existing database, and you do have control over how it looks but it does
mean you have to know about <a href="http://projects.spring.io/spring-framework/">Spring</a> and Java (both of which I do). Getting
an access token was easy, and wiring in the API was pretty simple. I did like
that you can run everything on a local machine whilst developing - but it also
required the most technical knowledge to get working.</p>

<h3 id="conclusion">Conclusion</h3>
<p>All three platforms made it simple to implement the required functionality.
Mashery and Apigee’s approach are pretty similar (although the platforms are
quite different), and Mulesoft’s approach also work’s well.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting APIs]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2013/06/27/documenting-apis/"/>
    <updated>2013-06-27T14:37:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2013/06/27/documenting-apis</id>
    <content type="html"><![CDATA[<p>One of the projects I am working on at work is revamping our mobile applications.</p>

<p>We are designing a RESTful web service layer that a mobile device will use to allow a customer to do various things.</p>

<p>One of the problems I have is that a third party is going to build the service layer and they need to be told what services the API layer has to expose. The mobile devs also need to know what to expect from the service.</p>

<p>I’ve tried to document everything using Word documents, but I couldn’t really get to a format that I liked. After talking to a few people I decided to try a couple of tools</p>

<h2 id="apiary">Apiary</h2>
<p><a href="http://apiary.io">Apiary</a> allows you to define an API using a simple, Markdown inspired DSL.</p>

<pre><code>HOST: http://shop.acme.com/
--- Sample API v2 ---
---
Welcome to our API. Comments support [Markdown](http://daringfireball.net/projects/markdown/syntax) syntax.
---
-- Shopping Cart Resources --
GET /shopping-cart
&gt; Accept: application/json
&lt; 200
&lt; Content-Type: application/json
{ "items": [
    { "url": "/shopping-cart/1", "product":"2ZY48XPZ", "quantity": 1, "name": "New socks", "price": 1.25 }
  ] }
</code></pre>

<p>It turns this markdown into some nice looking documentation to describe your API. It even lets you call the API from within Apiary and it can stub your API for you as well…</p>

<p>I liked it, but I couldn’t put the level of detail in the documentation that I wanted. I’d also prefer to deploy the documentation with the API not on Apiary’s site.</p>

<h2 id="swagger">Swagger</h2>
<p><a href="https://developers.helloreverb.com/swagger/">Swagger</a> have taken a slightly different approach, or actually several approaches. You can document you api in a number of ways: you can write some json to describe it, you can write java/scala and annotate your code or you can do it in javascript. Either way you end up with a load of json that describes your API.</p>

<p>Swagger-ui can be deployed with the API and renders the json in a nice looking format. You can also use it to call the API, but it doesn’t stub it for you.</p>

<p>You can see a demo <a href="http://petstore.swagger.wordnik.com/">here</a>.</p>

<p>In the end I used swagger, and annotated a Javascript stub that I was writing anyway. I can document everything I need to, and the developers get a nice UI to see what the API does.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brompton for sale]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2013/05/16/brompton-for-sale/"/>
    <updated>2013-05-16T18:56:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2013/05/16/brompton-for-sale</id>
    <content type="html"><![CDATA[<p>For sale one <a href="http://www.brompton.co.uk/">Brompton H6L</a>, hand built in September 2012. One careful owner (me!), selling as commuting on the train doesn’t fit in with work and childcare commitments.</p>

<p>The bike is pretty much as new, and in very good condition. It’s orange, it’s really well made and it’s very small when folded.</p>

<table>
  <tbody>
    <tr>
      <td><img src="http://www.landofshattereddreams.com/images/brompton/brompton_1.jpg" /></td>
      <td><img src="http://www.landofshattereddreams.com/images/brompton/brompton_3.jpg" /></td>
    </tr>
  </tbody>
</table>

<p>I had it custom built so there are a few features over the standard build:</p>

<ul>
  <li>it has a Shimano dynamo hub, so lights are always available</li>
  <li>it has Eazy Wheels fitted</li>
  <li>it has the telescopic seat post, I’m 6’4 and I had no trouble riding it</li>
  <li>it has the luggage block, and a Brompton C bag</li>
  <li>it has a cover and saddle bag, so you can take it on the tram</li>
</ul>

<p>I’ll consider any sensible offer…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to the Land of Shattered Dreams]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2013/04/28/welcome/"/>
    <updated>2013-04-28T20:33:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2013/04/28/welcome</id>
    <content type="html"><![CDATA[<p>I’ve been blogging at as <a href="http://typingincolor.com">typingincolor</a> for about three years. It started as
an exercise to learn a bit about wordpress, and was a place where I reviewed
whatever DVDs and books I’d been looking at.</p>

<p>As time progressed, I began to add some stuff about work and technology.
In particular I talked a bit about the journey the company I was working for
was taking into the world of agile development. I also put in some stuff about
technology that I was currently looking at.</p>

<p>It worked (and works) pretty well, but I’ve decided to try something new. I’ve
chosen to use <a href="http://octopress.org">octopress</a> as it will let me use some technologies I’m
interested in. I particularly like that the styling is done using <a href="http://sass-lang.com/">sass</a> and
the content written in <a href="http://daringfireball.net/projects/markdown/">markdown</a>. That fact that it’s built on ruby is a
happy coincidence.</p>

<p>The other thing I do really like is that it uses <a href="http://git-scm.com/">git</a> to publish the content.
I can run a local copy of any changes I make and preview them locally, I can then
push the content up to <a href="https://www.heroku.com/">heroku</a> where they are visible to the world.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Rest-Assured]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2013/04/10/playing-with-rest-assured/"/>
    <updated>2013-04-10T11:28:31+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2013/04/10/playing-with-rest-assured</id>
    <content type="html"><![CDATA[<p>We are moving to a service oriented architecture at work based using technology from <a href="http://apigee.com">Apigee</a> which is helping us build securable and scalable APIs for our applications to use.</p>

<p>Our APIs are based on <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful Web Services</a> with <a href="http://en.wikipedia.org/wiki/JSON">JSON</a> message bodies. This is means that they can be used by anything that can send a HTTP request, including a browser.</p>

<p>One of the challenges is testing these APIs. Being a Java shop, sending the HTTP requests can be a bit of a faff, as can parsing the resultant JSON responses. We want the tests to be automated, and seeing as we use <a href="http://junit.org">Junit</a> and <a href="https://code.google.com/p/hamcrest/">Hamcrest</a> something that works in a similar way would be good. After a bit of googling, one of my colleagues pointed me in the direction of <a href="https://code.google.com/p/rest-assured">Rest-Assured</a>.</p>

<p>Rest-Assured is a domain specific language for the easy testing of REST services, and attempts to bring the simplicity of using a dynamic language such a Ruby or Groovy to Java. It does this pretty well!</p>

<p>What I particularly like is that you can set up a fairly complex scenario with a minimum of code and it is really easy to see what is being tested. The documentation on the website is really good, but as an example:</p>

<p>Assume that a GET request to http://localhost:8080/ returns JSON as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;lotto&quot;</span><span class="p">:{</span>
</span><span class="line">         <span class="nt">&quot;lottoId&quot;</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
</span><span class="line">         <span class="nt">&quot;winning-numbers&quot;</span><span class="p">:[</span><span class="mi">2</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
</span><span class="line">         <span class="nt">&quot;winners&quot;</span><span class="p">:[{</span>
</span><span class="line">               <span class="nt">&quot;winnerId&quot;</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span>
</span><span class="line">               <span class="nt">&quot;numbers&quot;</span><span class="p">:[</span><span class="mi">2</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span><span class="line">         <span class="p">},{</span>
</span><span class="line">               <span class="nt">&quot;winnerId&quot;</span><span class="p">:</span><span class="mi">54</span><span class="p">,</span>
</span><span class="line">               <span class="nt">&quot;numbers&quot;</span><span class="p">:[</span><span class="mi">52</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">22</span><span class="p">]</span>
</span><span class="line">         <span class="p">}]</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">expect</span><span class="p">()</span><span class="o">.</span><span class="n">body</span><span class="p">(</span><span class="s2">&quot;lotto.lottoId&quot;</span><span class="p">,</span> <span class="n">equalTo</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">.</span><span class="n">when</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/lotto&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Verifies that the lottoId is 5 when you get it. It’s easy to read, simple to setup, and really powerful…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook London Hackathon 2012]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/09/22/facebook-london-hackathon-2012/"/>
    <updated>2012-09-22T10:05:34+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/09/22/facebook-london-hackathon-2012</id>
    <content type="html"><![CDATA[<p>Yesterday I went to Facebook’s London office for my first “Hackathon”.</p>

<p>We got started around 0930, and had a few hours of talks from the Facebook team as well as a number of their partners. The guys from Facebook talked to us about Open Graph, mobile development and Facebook games. The talks were a good introduction to Facebook’s various apis that we would be using for during the afternoon’s hacking. Three of Facebook’s partners then gave a very quick overview of their services.</p>

<p>We saw presentations from:</p>

<ul>
  <li><a href="http://www.twilio.com/">Twilio</a>, who provide all sorts of telephony goodness</li>
  <li><a href="http://www.deezer.com/en/">Deezer</a>, a web based music platform</li>
  <li><a href="http://pusher.com">Pusher</a>, a way of doing real time magic</li>
</ul>

<p><img class="right" src="http://www.landofshattereddreams.com/images/events/hackathon.jpg" title="hackathon" />
Once we’d finished we moved on the hacking. Everybody split into teams and had 7 hours to build something using the technologies discussed in the morning. Various prizes were on offer for the best hacks, they just had to use the Facebook platform.</p>

<p>Ben and I were at a slight disadvantage in that there were only two of us in our team, and we wanted to build something that we could use a work. We had a few ideas over the previous couple of days and decided to build a store visit application. Basically, a customer goes to app’s Facebook page, chooses which store they visited and are asked to submit a review of the store. The review is posted to Open Graph and will appear on the customer’s Facebook timeline. When a customer visits the page of the store, they will see all the reviews for that store and be able to like, comment etc on them.</p>

<p>We also wanted to use Twilio to contact the customer if their review was negative to try to address whatever problem the customer had.</p>

<p>We’re kind of limited to our technology choice seeing as we do things in Java, so we built our app on Tomcat using Spring MVC. We got to the point of posting the customer’s review to Open Graph, but we didn’t really have anything in a fit state to present to the group.</p>

<p>Most of our problems were around our choice of technology. Spring is a great framework, but it can be a bit of a pain to configure properly. I tried to get hibernate working with hsqldb but failed miserably and spent 90 minutes trying to persist our reviews. In the end I gave up, installed mongodb and got it working in about 20 minutes. I used the <a href="http://progrium.com/localtunnel/">localtunnel</a> gem  to allow Facebook access to my dev machine, but it kept on timing out which meant I had to continually reconfigure the app in Facebook. I used <a href="http://twitter.github.com/bootstrap/">bootstrap</a> for the colours and shapes, but it didn’t work properly in the Facebook canvas iframe.</p>

<p>Going forward, I’m going to look at <a href="http://java.heroku.com/">Java Heroku</a> which will remove the need for localtunnel. I need to play with bootstrap to get that to work properly and I will get the persistence layer working before I start when I go to my next hackathon.</p>

<p>All in all, it was a very useful day. I don’t get much chance to code anymore, let alone for 7 hours straight. The facilities provided by Facebook were excellent and all their engineers were very helpful.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Open Graph]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/07/25/facebook-open-graph/"/>
    <updated>2012-07-25T23:12:17+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/07/25/facebook-open-graph</id>
    <content type="html"><![CDATA[<p>I left my job at the Hut Group after 3.5 years and decided to move on to Morrisons to help them develop their online offering. The first thing I did on joining them was look at Open Graph in Facebook for a project they are working on.</p>

<p>Open Graph allows you to specify an action and an object, and do the action to the object. It will put the fact you’ve done this on you Facebook timeline for all your friends to see. On the AutoTrader website for example, you can “want” a car. The demo app from Facebook shows you how to “cook” a recipe. The possibilities are endless.</p>

<p>I found the whole thing really interesting. I got to write some javascript which I’ve not really done much of, and figuring out how to stop a user doing the same action twice was quite challenging.</p>

<p>Testing my app was a bit of a faff, as I was running on a corporate network and you need to allow Facebook access to your website. I managed to get around it by setting up a reverse ssh tunnel to an Amazon EC2 instance and forwarding the web requests from there to my application. It took me a while to get working, but it is actually dead simple once you know what you are doing.</p>

<p>The Facebook documentation is quite good, and the tutorial is really easy to follow. I got two relatively complicated apps going in about three days and I’m not great a javascript…</p>

<p>You can find out more by going to <a href="https://developers.facebook.com/docs/opengraph/tutorial/">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying haml, coffeescript, ruby and sinatra]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/31/trying-haml-coffeescript-ruby-and-sinatra/"/>
    <updated>2012-05-31T18:22:51+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/31/trying-haml-coffeescript-ruby-and-sinatra</id>
    <content type="html"><![CDATA[<p>I am looking at ways that I can build a web front-end for a system I am going to develop at work. Basically, I want to have a number of web services that will provide the data and then write a front end in html and java script to consume these services and display the data to a user.</p>

<p>I’m not a javascript expert, can do a bit of html and really didn’t want to do use java as it isn’t the quickest thing develop a prototype.</p>

<p>In the end I chose <a href="http://www.sinatrarb.com/">Sinatra</a>, a DSL for quickly creating web applications in Ruby with minimal effort. It is stupidly easy to create a web application! For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">get</span> <span class="s1">&#39;/hi&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="s2">&quot;Hello World!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Will return “Hello World!” when you go to http://localhost:4567/hi. I used the ROXML gem to squirt out an xml representation of a ruby object and I had a web service in around 30 lines of ruby.</p>

<p>So I had my web service up and running. Now to consume it… As I’ve mentioned before, I like <a href="http://twitter.github.com/bootstrap/">bootstrap</a> as it is really easy to write a good looking interface without having to know loads of CSS. HTML is ok, but it can look a bit of a mess, so I decided to use <a href="http://haml.info/">Haml</a>. It gets transformed into html, but it makes your markup look beautiful. Using it you have to go out of your way to write nasty html. Indentation is significant (a la python) so you have to right it neatly!</p>

<p>The final piece of the jigsaw is <a href="http://coffeescript.org/">coffeescript</a>, a little language that compile into javascript. The aim of coffeescript is to expose the good bits of javascript in a simple way. I like it because it removes the need for endless curly brackets and the function keyword.</p>

<p>All in all, I’m pretty pleased with the results. None of it is earth shattering, but the progress bars are pretty neat and I like the way I’ve built the results table.</p>

<p>If you want to see the code, you can clone it using git </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">git</span> <span class="nb">clone</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">bitbucket</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">typingincolor</span><span class="o">/</span><span class="n">ajax</span><span class="o">-</span><span class="n">prototype</span><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Hut Group's first Code Dojo ]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/16/the-hut-groups-first-code-dojo/"/>
    <updated>2012-05-16T21:03:02+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/16/the-hut-groups-first-code-dojo</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://www.landofshattereddreams.com/images/logos/dojo.jpg" /></p>

<p>A couple of years ago, one of our technical architects at the Hut Group ran a few code dojos to give the team experience of TDD and Pair Programming. The team has grown massively in the meantime, so I thought it would be a good opportunity to try it again.</p>

<p>To quote from <a href="http://codingdojo.org/">codingdojo.org</a>, a dojo is:</p>

<blockquote>
  <p>…a meeting where a bunch of coders get together to work on a programming challenge. They are there to have fun and to engage in <a href="http://codingdojo.org/cgi-bin/wiki.pl?DeliberatePractice">DeliberatePractice</a> in order to improve their skills.</p>
</blockquote>

<p>So, I booked the boardroom, setup an Intellij project on my MacBook and waited for the developers to arrive. In the end about 10 people came, with a range of development experience from less than a year, to more than we’d care to admit to.</p>

<p>The exercise I chose for the group was to implement the “fizz buzz” game. Basically for a given natural number greater zero return</p>

<ul>
  <li>
    <p>“fizz” if the number is divisible by 3</p>
  </li>
  <li>
    <p>“buzz” if the number is divisible by 5</p>
  </li>
  <li>
    <p>“fizzbuzz” if the number is divisible by both 3 and 5</p>
  </li>
  <li>
    <p>otherwise return the number</p>
  </li>
</ul>

<p>The first comedy moment was when we went round the table and tried to play “fizz buzz”. You’d have thought a group of highly skilled IT professionals would be able to do simple mental arithmetic, but this is apparently not the case…</p>

<p>The problem itself isn’t all that complicated, a decent developer could write the code in 5 minutes, but the point of the exercise isn’t really the end solution. More important is how you get to it. A pair of developers worked at the laptop. The driver types, focuses on tactics and writing clean code that compiles and runs. The navigator focuses on strategy. How the code fits into the overall design, which tests will drive the code forward, and which refactorings will improve the entire codebase.</p>

<p>We also wanted to build the solution using Test Driven Development. You write a test that fails, write some code to make it pass and then refactor. With a problem this simple it is quite difficult to force yourself to follow these steps.</p>

<p>We started with the simplest case we could think of, i.e. if you pass in 1, you get 1 back and built from there. We managed 7 iterations in the time we had available and got to a reasonable solution.</p>

<p>Going through the exercise prompted a lot of interesting debate. We talked about how you identify test cases, different ways of implementing the algorithm and even got into some OO design. I think the group found the exercise useful, I guess the proof will be when I see how many people come to the second code dojo.</p>

<p>There was one thing that I didn’t think worked too well. The navigator didn’t really get to contribute as the entire group chipped in ideas so effectively we had 10 navigators, but I’m not sure if this wasn’t a good thing.</p>

<p>Next time I may try using <a href="http://www.cyber-dojo.com/">cyber-dojo</a> which would allow pairs to work at the same time. It is a pretty neat site where you select a exercise and can code it online in a huge number of languages. One thing it does prove is that Java is a bit of a nightmare without an IDE, Ruby is the future!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Bootstrap]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/15/more-bootstrap/"/>
    <updated>2012-05-15T10:45:47+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/15/more-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="http://typingincolor-website.s.greenqloud.com/typingincolor.com/wp-content/uploads/2012/05/before1.png"><img class="left" src="http://www.landofshattereddreams.com/images/bootstrap/before.png" width="150" height="150" title="before before" /></a></p>

<p><a href="http://typingincolor-website.s.greenqloud.com/typingincolor.com/wp-content/uploads/2012/05/after1.png"><img class="left" src="http://www.landofshattereddreams.com/images/bootstrap/after.png" width="150" height="150" title="after after" /></a>
As discussed earlier I have been playing with bootstrap for a few weeks and I’m beginning to get into in now. Below is an example of a screen I re-developed to replace a horrible accordion control with tabs and pagination from bootstrap.</p>

<p>I think it looks much better now and it was pretty simple to implement.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with bootstrap]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/03/09/playing-with-bootstrap/"/>
    <updated>2012-03-09T00:09:38+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/03/09/playing-with-bootstrap</id>
    <content type="html"><![CDATA[<p>I’m not a big fan of developing user interfaces. Back in the day I used a tool called OpenROAD to write GUIs for database applications. It was a bit like VB, in that it was an event driven 4GL, but it stored everything in an Ingres database. You couldn’t do proper version control. There was no separation of business logic from presentation logic and you used on grids to position everything. I got quite good at it, but it put me off GUIs for ever.</p>

<p>Moving forward to the present day. I work for one of the UK’s largest online retailers and not liking GUIs is a bit of a disadvantage. I can knock up a webpage pretty quickly and can even do css to a degree, but I’m far from great and not in the same league as our front-end dev team.</p>

<p>I’ve been listening in on a few conversations and Bootstrap from Twitter came up. Bootstrap aims to provide Simple and flexible HTML, CSS, and Javascript for popular user interface components and interactions. I have to admit it seems to do it pretty darn well. I’ve been having a play with it this evening and have managed to knock up a couple of decent (in my opinion) looking screens pretty easily. I’ve got a functional nav-bar, some drop down menus and a reasonable looking form. All the javascript you need comes with it, the css is easy to apply to the html and there are some nice looking icons with it as well. All in all it’s been a pretty painless experience.</p>

<p>It might be time to buy some flip-flops, get a couple of shirts from Threadless and see if I can join the design team… (although my complete lack of talent will probably count against me).</p>

<p>If you interested, Bootstrap can be found <a href="http://twitter.github.com/bootstrap/index.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Things tasks from within outlook]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/12/15/create-things-tasks-from-within-outlook/"/>
    <updated>2011-12-15T23:20:27+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/12/15/create-things-tasks-from-within-outlook</id>
    <content type="html"><![CDATA[<p>I use <a href="http://www.red-sweater.com/fastscripts/">FastScripts</a> to run this, and it creates a Things task for each message you’ve selected in Outlook.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="applescript"><span class="line"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Microsoft Outlook&quot;</span>
</span><span class="line">	<span class="k">using terms from</span> <span class="nb">application</span> <span class="s2">&quot;Microsoft Outlook&quot;</span>
</span><span class="line">		<span class="c">-- get the currently selected message or messages</span>
</span><span class="line">		<span class="k">set</span> <span class="nv">selectedMessages</span> <span class="k">to</span> <span class="nv">current</span> <span class="nv">messages</span>
</span><span class="line">
</span><span class="line">		<span class="c">-- if there are no messages selected, warn the user and then quit</span>
</span><span class="line">		<span class="k">if</span> <span class="nv">selectedMessages</span> <span class="ow">is</span> <span class="p">{}</span> <span class="k">then</span>
</span><span class="line">			<span class="nb">display dialog</span> <span class="s2">&quot;Please select a message first and then run this script.&quot;</span> <span class="nv">with</span> <span class="nv">icon</span> <span class="mi">1</span>
</span><span class="line">			<span class="no">return</span>
</span><span class="line">		<span class="k">end</span> <span class="k">if</span>
</span><span class="line">
</span><span class="line">		<span class="k">repeat</span> <span class="nv">with</span> <span class="nv">theMessage</span> <span class="k">in</span> <span class="nv">selectedMessages</span>
</span><span class="line">			<span class="k">set</span> <span class="nv">theSubject</span> <span class="k">to</span> <span class="nv">subject</span> <span class="k">of</span> <span class="nv">theMessage</span>
</span><span class="line">			<span class="k">set</span> <span class="nv">theContent</span> <span class="k">to</span> <span class="nv">plain</span> <span class="nb">text</span> <span class="na">content</span> <span class="k">of</span> <span class="nv">theMessage</span>
</span><span class="line">
</span><span class="line">			<span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Things&quot;</span>
</span><span class="line">				<span class="k">set</span> <span class="nv">newToDo</span> <span class="k">to</span> <span class="nb">make</span> <span class="nb">new</span> <span class="k">to</span> <span class="nv">do</span> <span class="nv">with</span> <span class="na">properties</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nv">theSubject</span><span class="p">}</span>
</span><span class="line">				<span class="k">set</span> <span class="na">tag</span> <span class="nv">names</span> <span class="k">of</span> <span class="nv">newToDo</span> <span class="k">to</span> <span class="s2">&quot;email&quot;</span>
</span><span class="line">				<span class="k">set</span> <span class="nv">notes</span> <span class="k">of</span> <span class="nv">newToDo</span> <span class="k">to</span> <span class="nv">theContent</span>
</span><span class="line">			<span class="k">end</span> <span class="k">tell</span>
</span><span class="line">		<span class="k">end</span> <span class="k">repeat</span>
</span><span class="line">	<span class="k">end</span> <span class="k">using terms from</span>
</span><span class="line"><span class="k">end</span> <span class="k">tell</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alfred Things plugin]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/12/15/alfred-things-plugin/"/>
    <updated>2011-12-15T23:17:04+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/12/15/alfred-things-plugin</id>
    <content type="html"><![CDATA[<p>My second applescript for alfred. This time it creates a things task.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="applescript"><span class="line"><span class="k">on</span> <span class="nv">alfred_script</span><span class="p">(</span><span class="nv">q</span><span class="p">)</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">theSubject</span> <span class="k">to</span> <span class="nv">q</span>
</span><span class="line">	<span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Things&quot;</span>
</span><span class="line">		<span class="k">set</span> <span class="nv">newToDo</span> <span class="k">to</span> <span class="nb">make</span> <span class="nb">new</span> <span class="k">to</span> <span class="nv">do</span> <span class="nv">with</span> <span class="na">properties</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nv">theSubject</span><span class="p">}</span>
</span><span class="line">		<span class="k">set</span> <span class="na">tag</span> <span class="nv">names</span> <span class="k">of</span> <span class="nv">newToDo</span> <span class="k">to</span> <span class="s2">&quot;alfred&quot;</span>
</span><span class="line">	<span class="k">end</span> <span class="k">tell</span>
</span><span class="line"><span class="k">end</span> <span class="nv">alfred_script</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alfred ssh plugin [Updated]]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/12/13/alfred-ssh-plugin/"/>
    <updated>2011-12-13T00:29:41+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/12/13/alfred-ssh-plugin</id>
    <content type="html"><![CDATA[<p>I use Alfred (<a href="http://www.alfredapp.com/">http://www.alfredapp.com/</a>) to speed things up on my mac and it is a brilliant bit of software. I pay for the powerpack and have written a little bit of applescript to allow me to ssh to a server from the launcher.</p>

<p>I have it set up to so that “ssh server username” will connect to server as username. If you don’t put it a username it will default to “default”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="applescript"><span class="line"><span class="k">on</span> <span class="nv">alfred_script</span><span class="p">(</span><span class="nv">q</span><span class="p">)</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">tmp</span> <span class="k">to</span> <span class="nv">splitString</span><span class="p">(</span><span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">q</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="k">set</span> <span class="nv">server</span> <span class="k">to</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">tmp</span>
</span><span class="line">
</span><span class="line">	<span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="nv">tmp</span> <span class="ow">is</span> <span class="mi">2</span> <span class="k">then</span> <span class="k">set</span> <span class="nv">login</span> <span class="k">to</span> <span class="nb">item</span> <span class="mi">2</span> <span class="k">of</span> <span class="nv">tmp</span>
</span><span class="line">	<span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="nv">tmp</span> <span class="ow">is</span> <span class="mi">1</span> <span class="k">then</span> <span class="k">set</span> <span class="nv">login</span> <span class="k">to</span> <span class="s2">&quot;default&quot;</span>
</span><span class="line">
</span><span class="line">	<span class="k">set</span> <span class="nv">command</span> <span class="k">to</span> <span class="s2">&quot;ssh &quot;</span> <span class="o">&amp;</span> <span class="nv">server</span> <span class="o">&amp;</span> <span class="s2">&quot; -l &quot;</span> <span class="o">&amp;</span> <span class="nv">login</span>
</span><span class="line">
</span><span class="line">	<span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Terminal&quot;</span>
</span><span class="line">		<span class="nv">do</span> <span class="nv">script</span> <span class="nv">command</span>
</span><span class="line">	<span class="k">end</span> <span class="k">tell</span>
</span><span class="line"><span class="k">end</span> <span class="nv">alfred_script</span>
</span><span class="line">
</span><span class="line"><span class="k">to</span> <span class="nv">splitString</span><span class="p">(</span><span class="nv">aString</span><span class="p">,</span> <span class="nv">delimiter</span><span class="p">)</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">retVal</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">prevDelimiter</span> <span class="k">to</span> <span class="no">AppleScript</span>&#39;s <span class="no">text item delimiters</span>
</span><span class="line">	<span class="k">set</span> <span class="no">AppleScript</span>&#39;s <span class="no">text item delimiters</span> <span class="k">to</span> <span class="p">{</span><span class="nv">delimiter</span><span class="p">}</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">retVal</span> <span class="k">to</span> <span class="nb">every</span> <span class="nb">text</span> <span class="nb">item</span> <span class="k">of</span> <span class="nv">aString</span>
</span><span class="line">	<span class="k">set</span> <span class="no">AppleScript</span>&#39;s <span class="no">text item delimiters</span> <span class="k">to</span> <span class="nv">prevDelimiter</span>
</span><span class="line">	<span class="no">return</span> <span class="nv">retVal</span>
</span><span class="line"><span class="k">end</span> <span class="nv">splitString</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Phil wrote a version that can handle ports as well. I’ve changed it slightly as something appears to have changed within Alfred which was causing it to ignore the username passed in.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="applescript"><span class="line"><span class="k">on</span> <span class="nv">alfred_script</span><span class="p">(</span><span class="nv">q</span><span class="p">)</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">tmp</span> <span class="k">to</span> <span class="nv">splitString</span><span class="p">(</span><span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">q</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="k">set</span> <span class="nv">server</span> <span class="k">to</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">tmp</span>
</span><span class="line">
</span><span class="line">	<span class="cm">(* Split at colon delimiter *)</span>
</span><span class="line">	<span class="k">set</span> <span class="nv">server</span> <span class="k">to</span> <span class="nv">splitString</span><span class="p">(</span><span class="nv">server</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="cm">(* Does it contain a port? If not just roll with it. *)</span>
</span><span class="line">	<span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="nv">server</span> <span class="ow">is</span> <span class="mi">2</span> <span class="k">then</span>
</span><span class="line">		<span class="k">set</span> <span class="nv">serverport</span> <span class="k">to</span> <span class="nb">item</span> <span class="mi">2</span> <span class="k">of</span> <span class="nv">server</span>
</span><span class="line">		<span class="k">set</span> <span class="nv">serverip</span> <span class="k">to</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">server</span>
</span><span class="line">		<span class="k">set</span> <span class="nv">server</span> <span class="k">to</span> <span class="nv">serverip</span> <span class="o">&amp;</span> <span class="s2">&quot; -p &quot;</span> <span class="o">&amp;</span> <span class="nv">serverport</span>
</span><span class="line">	<span class="k">end</span> <span class="k">if</span>
</span><span class="line">
</span><span class="line">	<span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="nv">tmp</span> <span class="ow">is</span> <span class="mi">2</span> <span class="k">then</span> <span class="k">set</span> <span class="nv">login</span> <span class="k">to</span> <span class="nb">item</span> <span class="mi">2</span> <span class="k">of</span> <span class="nv">tmp</span>
</span><span class="line">	<span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="nv">tmp</span> <span class="ow">is</span> <span class="mi">1</span> <span class="k">then</span> <span class="k">set</span> <span class="nv">login</span> <span class="k">to</span> <span class="s2">&quot;default&quot;</span>
</span><span class="line">
</span><span class="line">	<span class="k">set</span> <span class="nv">command</span> <span class="k">to</span> <span class="s2">&quot;ssh &quot;</span> <span class="o">&amp;</span> <span class="nv">server</span> <span class="o">&amp;</span> <span class="s2">&quot; -l &quot;</span> <span class="o">&amp;</span> <span class="nv">login</span>
</span><span class="line">
</span><span class="line">	<span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Terminal&quot;</span>
</span><span class="line">		<span class="nv">do</span> <span class="nv">script</span> <span class="nv">command</span>
</span><span class="line">	<span class="k">end</span> <span class="k">tell</span>
</span><span class="line"><span class="k">end</span> <span class="nv">alfred_script</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Explained]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/09/14/software-engineering-explained/"/>
    <updated>2011-09-14T22:20:57+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/09/14/software-engineering-explained</id>
    <content type="html"><![CDATA[<p><a href="http://www.landofshattereddreams.com/images/funny/software-engineering-explained.png"><img src="http://www.landofshattereddreams.com/images/funny/software-engineering-explained.png" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Management Monkey]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/05/25/management-monkey/"/>
    <updated>2011-05-25T15:58:23+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/05/25/management-monkey</id>
    <content type="html"><![CDATA[<p>As a developer of long experience, and a manager more recently this joke appealed to me:</p>

<p>A tourist walked into a pet shop and was looking at the animals on display. While he was there,another customer walked in and said to the shopkeeper, “I’ll have a C monkey please.” The shopkeeper nodded, went over to a cage at the side of the shop and took out a monkey. He fitted a collar and leash, handed to the customer,saying, “That’ll be $5,000.”</p>

<p>The customer paid and walked out with his monkey. Startled,the tourist went over to the shopkeeper and said,”That was a very expensive monkey. Most of them are only a few hundred pounds. Why did it cost so much? “The shopkeeper answered, “Ah,that monkey can program in C - very fast,tight code,no bugs,well worth the money.”</p>

<p>The tourist looked at a monkey in another cage. “Hey,that one’s even more expensive! $10,000! What does it do?”</p>

<p>“Oh,that one’s a C++ monkey; it can manage object-oriented programming,Visual C++, even some Java All the really useful stuff,” said the shopkeeper.</p>

<p>The tourist looked around for a little longer and saw a third monkey in a cage of its own. The price tag around its neck read $50,000.The tourist gasped to the shopkeeper, “That one costs more than all the others put together! What on earth does it do?”</p>

<p>The shopkeeper replied, “Well, I haven’t actually seen it do anything, but it says it’s a project manager”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Birthday to me]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/04/25/happy-birthday-to-me/"/>
    <updated>2011-04-25T10:00:13+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/04/25/happy-birthday-to-me</id>
    <content type="html"><![CDATA[<p>So another year gone and I have reached the ripe old age of 36. I guess I will have to accept that I am now middle aged. The chances of me playing centre-half for City or becoming a rock god are probably now on the remote side, so what I am going to do for the second half of my life?</p>

<p>The first half has been pretty eventful. I’ve been married for the best part of 14 years to the girl I met at university, and despite what I may say, I don’t regret any of it.</p>

<p>I have two lovely boys who drive me insane but who I wouldn’t be without.</p>

<p>I’ve been pretty successful at work, despite some interesting career choices. I’ve even ended up managing a team of 30, which I am sure will amuse a number of my former colleagues. I’ve worked in Belgium for a year, worked for the UK’s biggest bank, the largest IT company in the world and even the Guernsey Government. I’ve worked with some brilliant people and written some pretty code.</p>

<p>It’s not all been fun. Number 1 son was born four 3 months early, weighing 1lb 9oz. I wouldn’t want to repeat the night he was born, stressful doesn’t begin to cover it. I can only guess how much the NHS spent looking after him, but I am eternally grateful to everybody who did. I find it amazing that he shows absolutely no signs of what he want through.</p>

<p>So the last 35 years have been pretty good on the whole. What to do now?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAGNI]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/03/25/yagni/"/>
    <updated>2011-03-25T00:02:37+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/03/25/yagni</id>
    <content type="html"><![CDATA[<p>YAGNI or You Ain’t Going To Need It - the battle cry of the committed agilista. Software developers, myself included, have a rather annoying tendency to over engineer their solutions. We sit there thinking that with a little bit of extra effort we can build a framework or make the code easily extensible so that when the next problem comes along it will take us no time at all to build a solution.</p>

<p>There just two problems:</p>

<ul>
  <li>It never takes a little bit of effort</li>
  <li>The “extensible” code you build is never that extensible - it never fits tomorrow’s problem</li>
</ul>

<p>Hence YAGNI! You build enough to solve today’s problem, and worry about tomorrow’s problem tomorrow.</p>

<p>Why am I blogging about YAGNI? As <a href="http://typingincolor.com/2011/03/andrew-braithwaite/my-first-rails-app/">previously mentioned</a> I have been writing a skills matrix application for work so I can track the level of skill in my team over time. I have high hopes of building an all singing, all dancing system in ruby on rails that will be all things to all men. Unfortunately, I want to know what we know today not in six months. So I built a version that did the bare minimum and released it. I started with collecting the data, I’ve now added a report and will start tracking changes next. I’ve not really worried about how I’m going to build the new functionality and I’m hoping it will all come out in the wash.</p>

<p>Now I could be wrong about YAGNI, it may turn out that I did need it after all. But if worst comes to the worst, I’ve got the data, I’ve learnt a lot of ruby and the next version of skillz will be better. I’m pretty confident I can make it all work, and I’m really good a data migrations if it doesn’t. I can always use Excel if I have to…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Rails App...]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/03/17/my-first-rails-app/"/>
    <updated>2011-03-17T00:13:53+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/03/17/my-first-rails-app</id>
    <content type="html"><![CDATA[<p><a href="http://rubyonrails.org"><img class="left" src="http://www.landofshattereddreams.com/images/logos/rails.png" /></a>
I have worked in IT for the best part of 15 years, most of that in technical roles. I started as a Trainee Programmer in the IT department of a large bank, and have ended up as the Head of Development at at one of the UK’s fastest growing technology companies. When I started work I developed in C and a 4GL called  OpenROAD, and I was pretty good at them…</p>

<p>I started using Java in around 1999, back when applets were still used. I quite liked it, and I’ve used it pretty much ever since. I last worked on a C project in 2000, I could probably remember how to compile a program if I had to, but I suspect I would just cause servers to core dump if I was allowed any where near them now.</p>

<p>I’ve not really written any  serious code at work for probably 18 months and to be honest, doing anything in Java doesn’t really appeal as I’ve been there and done that.</p>

<p>One of the things I want to do is get a picture of how much my team actually know and then track any improvement over time. One of my colleagues produced a skills matrix for his team where there is a list of skills, and everybody gives themselves a score from 0 to 4 based on how they perceive their skill level. It is a really useful tool when you collate all the data, and I thought I’d have some of that.</p>

<p>Now, my colleague did his skills matrix using Excel; but as a one-time code monkey I thought it would be a good excuse to dust off the old development skills and build a web application to do it.</p>

<p>I looked at a few options to build the app. Groovy on Grails and the Play framework are basically java, and I really can’t be bothered with that; so in the end I went for Ruby on Rails.</p>

<p><a href="http://www.ruby-lang.org/en/"><img class="left" src="http://www.landofshattereddreams.com/images/logos/ruby.gif" /></a>
I quite like Ruby as  a language. It is weakly typed which makes things a lot easier and the syntax pretty easy to follow. Rails as development framework is ridiculously easy. I have written less than 100 lines code to build the app. The hardest part was the css so that it didn’t look like a dogs dinner. I’m not sure I am entirely in favour of how easy it is, there is a bit to much magic for my liking; things work when I think they shouldn’t and then I spend 10 minutes working out why it works. All-in-all though it has been a pretty enjoyable experience.</p>

<p>There are a few things a really do like though:</p>

<ul>
  <li>
    <p><a href="http://haml.info">haml</a> - I didn’t really see the point at first. It is a templating framework to generate html. You still need to really understand html (this is why I didn’t see the point), but it does make you write properly formatted code. It also stops you doing some of the more horrible things you can do in jsps or erb.</p>
  </li>
  <li>
    <p><a href="http://www.sourcetreeapp.com/">sourcetree</a> - it’s a client for git (and mercurial) for OS X and it makes it soooo much easier. Git is a brilliant source control tool, and sourcetree makes it really easy. I know the guy who developed it and he’s done a great job on it.</p>
  </li>
  <li>
    <p><a href="http://www.heroku.com/">heroku</a> - makes it stupidly easy to deploy your rails app to a production environment. You just push you git repo up to it and it just works. If only java was so easy.</p>
  </li>
</ul>

<p>Maybe it is time for me to stop going to meetings, planning projects and get with the program and do some proper development. Skillz version 1 (great name eh?) will be unleashed on the development team next week, and I’m already planning the features for version 2.</p>

<p>The one fly in the ointment is that Rails development on Windoze truly sucks. Git doesn’t work properly, the tools suck, windoze sucks and the whole experience is just rubbish. If you’re going to do Rails buy a mac.</p>
]]></content>
  </entry>
  
</feed>
