<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Andrew Braithwaite | The Land of Shattered Dreams]]></title>
  <link href="http://www.landofshattereddreams.com/tags/andrew-braithwaite/atom.xml" rel="self"/>
  <link href="http://www.landofshattereddreams.com/"/>
  <updated>2014-04-14T13:43:14+01:00</updated>
  <id>http://www.landofshattereddreams.com/</id>
  <author>
    <name><![CDATA[Andrew Braithwaite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maneuverable Web Architecture]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2014/04/11/maneuverable-web-architecture/"/>
    <updated>2014-04-11T11:19:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2014/04/11/maneuverable-web-architecture</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/typhoon.jpeg">
One of my colleagues attend QCon London and saw a presentation by <a href="http://www.michaelnygard.com/">Michael Nygard</a>
on <a href="http://gotocon.com/berlin-2013/presentation/Maneuverable%20Web%20Architecture">Maneuverable Web Architecture</a>. A few of us got together and watched it and
it got us thinking…</p>

<p>Businesses need to be able to move quickly, and some of the established architectural
patterns stop them doing this. The presentation contained lots of ideas but I am going
to concentrate on one: sending an email to a customer.</p>

<p>The traditional approach is for the application sending the email to write to a
database saying who the email is to goto, when to send it and the data to be included
in the email. A batch job wakes up, scans the database for emails to send, builds them
and then sends them on.</p>

<p>This approach works well, loads of people have done it, and it is pretty easy to
implement. There are some problems though: changing things can be difficult; you have
to make sure that you don’t break any of the queued emails whenever you make a change.
The solution isn’t very flexible either, it is good for sending emails but if you want
to do something else you will have to revisit your entire solution.</p>

<p>Is there a better way? Michael proposed this approach. When I first saw it I thought
it was a bit crazy, but I had a go at implementing it and it has a lot going for it…</p>

<p>We first create a few components:</p>

<ul>
  <li><strong>at service</strong> - this service calls a specified url at a given point in time</li>
  <li><strong>script engine</strong> - this service is passed a script and executes it</li>
  <li><strong>script factory</strong> - this service builds scripts for the script engine to execute</li>
</ul>

<p>How does this let us send an email to a customer?</p>

<ul>
  <li>the client sending the email says to the script factory: “Give me an email sending script”</li>
  <li>the script factory builds the script and passes a url to execute the script to the client</li>
  <li>the client says to the at service: “Call this url now”</li>
  <li>the at service calls the url, and the script engine executes the script</li>
  <li>the script does everything required to send an email to the customer</li>
</ul>

<p>How is this better?
* The at service just calls urls at a point in time, you can use it for anything
* If the you add new functionality you can just deploy a new script engine and script factory
on a different url. All the exisitng scripts will still work, any new scripts will go to the new
versions. If you want to add email tracking, change the script factory to include
it and then all new scripts will have email tracking. All the old scripts will still work.
* All clients are doing is asking for a script and scheduling them. You
can write scripts to do anything you can think of…</p>

<p>I am glossing over some of the problems… The script engine is non-trivial, error
handling seems complicated and it takes some explaining to developers.</p>

<p>If your interested I had a go at implementing the approach, you can see the results on <a href="http://github.com/typingincolor/typhoon">github</a>.
It is by no means production ready, but you can kind of see how it could work…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAGNI]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2011/03/25/yagni/"/>
    <updated>2011-03-25T00:02:37+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2011/03/25/yagni</id>
    <content type="html"><![CDATA[<p>YAGNI or You Ain’t Going To Need It - the battle cry of the committed agilista. Software developers, myself included, have a rather annoying tendency to over engineer their solutions. We sit there thinking that with a little bit of extra effort we can build a framework or make the code easily extensible so that when the next problem comes along it will take us no time at all to build a solution.</p>

<p>There just two problems:</p>

<ul>
  <li>It never takes a little bit of effort</li>
  <li>The “extensible” code you build is never that extensible - it never fits tomorrow’s problem</li>
</ul>

<p>Hence YAGNI! You build enough to solve today’s problem, and worry about tomorrow’s problem tomorrow.</p>

<p>Why am I blogging about YAGNI? As <a href="http://typingincolor.com/2011/03/andrew-braithwaite/my-first-rails-app/">previously mentioned</a> I have been writing a skills matrix application for work so I can track the level of skill in my team over time. I have high hopes of building an all singing, all dancing system in ruby on rails that will be all things to all men. Unfortunately, I want to know what we know today not in six months. So I built a version that did the bare minimum and released it. I started with collecting the data, I’ve now added a report and will start tracking changes next. I’ve not really worried about how I’m going to build the new functionality and I’m hoping it will all come out in the wash.</p>

<p>Now I could be wrong about YAGNI, it may turn out that I did need it after all. But if worst comes to the worst, I’ve got the data, I’ve learnt a lot of ruby and the next version of skillz will be better. I’m pretty confident I can make it all work, and I’m really good a data migrations if it doesn’t. I can always use Excel if I have to…</p>
]]></content>
  </entry>
  
</feed>
