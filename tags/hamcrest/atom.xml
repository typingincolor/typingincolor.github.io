<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: hamcrest | The Land of Shattered Dreams]]></title>
  <link href="http://typingincolor.github.io/tags/hamcrest/atom.xml" rel="self"/>
  <link href="http://typingincolor.github.io/"/>
  <updated>2014-03-17T13:55:53+00:00</updated>
  <id>http://typingincolor.github.io/</id>
  <author>
    <name><![CDATA[Andrew Braithwaite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with Rest-Assured]]></title>
    <link href="http://typingincolor.github.io/blog/2013/04/10/playing-with-rest-assured/"/>
    <updated>2013-04-10T11:28:31+01:00</updated>
    <id>http://typingincolor.github.io/blog/2013/04/10/playing-with-rest-assured</id>
    <content type="html"><![CDATA[<p>We are moving to a service oriented architecture at work based using technology from <a href="http://apigee.com">Apigee</a> which is helping us build securable and scalable APIs for our applications to use.</p>

<p>Our APIs are based on <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful Web Services</a> with <a href="http://en.wikipedia.org/wiki/JSON">JSON</a> message bodies. This is means that they can be used by anything that can send a HTTP request, including a browser.</p>

<p>One of the challenges is testing these APIs. Being a Java shop, sending the HTTP requests can be a bit of a faff, as can parsing the resultant JSON responses. We want the tests to be automated, and seeing as we use <a href="http://junit.org">Junit</a> and <a href="https://code.google.com/p/hamcrest/">Hamcrest</a> something that works in a similar way would be good. After a bit of googling, one of my colleagues pointed me in the direction of <a href="https://code.google.com/p/rest-assured">Rest-Assured</a>.</p>

<p>Rest-Assured is a domain specific language for the easy testing of REST services, and attempts to bring the simplicity of using a dynamic language such a Ruby or Groovy to Java. It does this pretty well!</p>

<p>What I particularly like is that you can set up a fairly complex scenario with a minimum of code and it is really easy to see what is being tested. The documentation on the website is really good, but as an example:</p>

<p>Assume that a GET request to http://localhost:8080/ returns JSON as:</p>

<p><code>json
{
    "lotto":{
         "lottoId":5,
         "winning-numbers":[2,45,34,23,7,5,3],
         "winners":[{
               "winnerId":23,
               "numbers":[2,45,34,23,3,5]
         },{
               "winnerId":54,
               "numbers":[52,3,12,11,18,22]
         }]
    }
} 
</code></p>

<p>Then:</p>

<p><code>ruby
expect().body("lotto.lottoId", equalTo(5)).when().get("/lotto");
</code></p>

<p>Verifies that the lottoId is 5 when you get it. It’s easy to read, simple to setup, and really powerful…</p>

]]></content>
  </entry>
  
</feed>
