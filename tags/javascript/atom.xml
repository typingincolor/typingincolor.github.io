<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: javascript | The Land of Shattered Dreams]]></title>
  <link href="http://www.landofshattereddreams.com/tags/javascript/atom.xml" rel="self"/>
  <link href="http://www.landofshattereddreams.com/"/>
  <updated>2014-11-24T13:59:28+00:00</updated>
  <id>http://www.landofshattereddreams.com/</id>
  <author>
    <name><![CDATA[Andrew Braithwaite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Documenting APIs]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2013/06/27/documenting-apis/"/>
    <updated>2013-06-27T14:37:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2013/06/27/documenting-apis</id>
    <content type="html"><![CDATA[<p>One of the projects I am working on at work is revamping our mobile applications.</p>

<p>We are designing a RESTful web service layer that a mobile device will use to allow a customer to do various things.</p>

<p>One of the problems I have is that a third party is going to build the service layer and they need to be told what services the API layer has to expose. The mobile devs also need to know what to expect from the service.</p>

<p>I’ve tried to document everything using Word documents, but I couldn’t really get to a format that I liked. After talking to a few people I decided to try a couple of tools</p>

<h2 id="apiary">Apiary</h2>
<p><a href="http://apiary.io">Apiary</a> allows you to define an API using a simple, Markdown inspired DSL.</p>

<pre><code>HOST: http://shop.acme.com/
--- Sample API v2 ---
---
Welcome to our API. Comments support [Markdown](http://daringfireball.net/projects/markdown/syntax) syntax.
---
-- Shopping Cart Resources --
GET /shopping-cart
&gt; Accept: application/json
&lt; 200
&lt; Content-Type: application/json
{ "items": [
    { "url": "/shopping-cart/1", "product":"2ZY48XPZ", "quantity": 1, "name": "New socks", "price": 1.25 }
  ] }
</code></pre>

<p>It turns this markdown into some nice looking documentation to describe your API. It even lets you call the API from within Apiary and it can stub your API for you as well…</p>

<p>I liked it, but I couldn’t put the level of detail in the documentation that I wanted. I’d also prefer to deploy the documentation with the API not on Apiary’s site.</p>

<h2 id="swagger">Swagger</h2>
<p><a href="https://developers.helloreverb.com/swagger/">Swagger</a> have taken a slightly different approach, or actually several approaches. You can document you api in a number of ways: you can write some json to describe it, you can write java/scala and annotate your code or you can do it in javascript. Either way you end up with a load of json that describes your API.</p>

<p>Swagger-ui can be deployed with the API and renders the json in a nice looking format. You can also use it to call the API, but it doesn’t stub it for you.</p>

<p>You can see a demo <a href="http://petstore.swagger.wordnik.com/">here</a>.</p>

<p>In the end I used swagger, and annotated a Javascript stub that I was writing anyway. I can document everything I need to, and the developers get a nice UI to see what the API does.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Open Graph]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/07/25/facebook-open-graph/"/>
    <updated>2012-07-25T23:12:17+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/07/25/facebook-open-graph</id>
    <content type="html"><![CDATA[<p>I left my job at the Hut Group after 3.5 years and decided to move on to Morrisons to help them develop their online offering. The first thing I did on joining them was look at Open Graph in Facebook for a project they are working on.</p>

<p>Open Graph allows you to specify an action and an object, and do the action to the object. It will put the fact you’ve done this on you Facebook timeline for all your friends to see. On the AutoTrader website for example, you can “want” a car. The demo app from Facebook shows you how to “cook” a recipe. The possibilities are endless.</p>

<p>I found the whole thing really interesting. I got to write some javascript which I’ve not really done much of, and figuring out how to stop a user doing the same action twice was quite challenging.</p>

<p>Testing my app was a bit of a faff, as I was running on a corporate network and you need to allow Facebook access to your website. I managed to get around it by setting up a reverse ssh tunnel to an Amazon EC2 instance and forwarding the web requests from there to my application. It took me a while to get working, but it is actually dead simple once you know what you are doing.</p>

<p>The Facebook documentation is quite good, and the tutorial is really easy to follow. I got two relatively complicated apps going in about three days and I’m not great a javascript…</p>

<p>You can find out more by going to <a href="https://developers.facebook.com/docs/opengraph/tutorial/">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying haml, coffeescript, ruby and sinatra]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/31/trying-haml-coffeescript-ruby-and-sinatra/"/>
    <updated>2012-05-31T18:22:51+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/31/trying-haml-coffeescript-ruby-and-sinatra</id>
    <content type="html"><![CDATA[<p>I am looking at ways that I can build a web front-end for a system I am going to develop at work. Basically, I want to have a number of web services that will provide the data and then write a front end in html and java script to consume these services and display the data to a user.</p>

<p>I’m not a javascript expert, can do a bit of html and really didn’t want to do use java as it isn’t the quickest thing develop a prototype.</p>

<p>In the end I chose <a href="http://www.sinatrarb.com/">Sinatra</a>, a DSL for quickly creating web applications in Ruby with minimal effort. It is stupidly easy to create a web application! For example:</p>

<p>``` ruby
require ‘sinatra’</p>

<p>get ‘/hi’ do
    “Hello World!”
```</p>

<p>Will return “Hello World!” when you go to http://localhost:4567/hi. I used the ROXML gem to squirt out an xml representation of a ruby object and I had a web service in around 30 lines of ruby.</p>

<p>So I had my web service up and running. Now to consume it… As I’ve mentioned before, I like <a href="http://twitter.github.com/bootstrap/">bootstrap</a> as it is really easy to write a good looking interface without having to know loads of CSS. HTML is ok, but it can look a bit of a mess, so I decided to use <a href="http://haml.info/">Haml</a>. It gets transformed into html, but it makes your markup look beautiful. Using it you have to go out of your way to write nasty html. Indentation is significant (a la python) so you have to right it neatly!</p>

<p>The final piece of the jigsaw is <a href="http://coffeescript.org/">coffeescript</a>, a little language that compile into javascript. The aim of coffeescript is to expose the good bits of javascript in a simple way. I like it because it removes the need for endless curly brackets and the function keyword.</p>

<p>All in all, I’m pretty pleased with the results. None of it is earth shattering, but the progress bars are pretty neat and I like the way I’ve built the results table.</p>

<p>If you want to see the code, you can clone it using git </p>

<p><code>
    git clone https://bitbucket.org/typingincolor/ajax-prototype.git
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Bootstrap]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/15/more-bootstrap/"/>
    <updated>2012-05-15T10:45:47+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/15/more-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="http://typingincolor-website.s.greenqloud.com/typingincolor.com/wp-content/uploads/2012/05/before1.png"><img class="left" src="/images/bootstrap/before.png" width="150" height="150" title="before before" ></a></p>

<p><a href="http://typingincolor-website.s.greenqloud.com/typingincolor.com/wp-content/uploads/2012/05/after1.png"><img class="left" src="/images/bootstrap/after.png" width="150" height="150" title="after after" ></a>
As discussed earlier I have been playing with bootstrap for a few weeks and I’m beginning to get into in now. Below is an example of a screen I re-developed to replace a horrible accordion control with tabs and pagination from bootstrap.</p>

<p>I think it looks much better now and it was pretty simple to implement.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with bootstrap]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/03/09/playing-with-bootstrap/"/>
    <updated>2012-03-09T00:09:38+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/03/09/playing-with-bootstrap</id>
    <content type="html"><![CDATA[<p>I’m not a big fan of developing user interfaces. Back in the day I used a tool called OpenROAD to write GUIs for database applications. It was a bit like VB, in that it was an event driven 4GL, but it stored everything in an Ingres database. You couldn’t do proper version control. There was no separation of business logic from presentation logic and you used on grids to position everything. I got quite good at it, but it put me off GUIs for ever.</p>

<p>Moving forward to the present day. I work for one of the UK’s largest online retailers and not liking GUIs is a bit of a disadvantage. I can knock up a webpage pretty quickly and can even do css to a degree, but I’m far from great and not in the same league as our front-end dev team.</p>

<p>I’ve been listening in on a few conversations and Bootstrap from Twitter came up. Bootstrap aims to provide Simple and flexible HTML, CSS, and Javascript for popular user interface components and interactions. I have to admit it seems to do it pretty darn well. I’ve been having a play with it this evening and have managed to knock up a couple of decent (in my opinion) looking screens pretty easily. I’ve got a functional nav-bar, some drop down menus and a reasonable looking form. All the javascript you need comes with it, the css is easy to apply to the html and there are some nice looking icons with it as well. All in all it’s been a pretty painless experience.</p>

<p>It might be time to buy some flip-flops, get a couple of shirts from Threadless and see if I can join the design team… (although my complete lack of talent will probably count against me).</p>

<p>If you interested, Bootstrap can be found <a href="http://twitter.github.com/bootstrap/index.html">here</a>.</p>
]]></content>
  </entry>
  
</feed>
