<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Work | The Land of Shattered Dreams]]></title>
  <link href="http://www.landofshattereddreams.com/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://www.landofshattereddreams.com/"/>
  <updated>2014-04-24T08:21:21+01:00</updated>
  <id>http://www.landofshattereddreams.com/</id>
  <author>
    <name><![CDATA[Andrew Braithwaite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adventures in OAuth2]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2014/03/17/adventures-in-oauth2/"/>
    <updated>2014-03-17T09:01:00+00:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2014/03/17/adventures-in-oauth2</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logos/oauth-2-sm.png">
I’ve not been able to blog for a while as a lot of things have been going on.
In November I left <a href="http://www.morrisons.co.uk">Morrisons</a> to take a Solutions Architect role at <a href="http://www.laterooms.com">Laterooms</a>
and it has taken me a while to get settled in and to work out what’s going on.</p>

<p>One of the things I am looking at for Laterooms is how we use APIs to power our
platform. We’ve developed <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful APIs</a> that are used by our mobile applications
but we can do a whole lot more with our APIs. Long term, I’d like to build our entire
platform on APIs using them as the base for our mobile apps, the websites and our
integration with affiliates and hotel providers. We’ve got a long way to go, but
I guess a journey of a thousand miles begins with a single step.</p>

<p>One of the key considerations we have when designing our API platform is controlling
who has access to our data. We want to build a platform capable of allowing <em>authorized</em>
consumers unlimited access to Lateroom’s data. Note <em>authorized</em> consumers, some data
is public and we want to make it as easy as possible to access it; some data is
most definitely not public and access to it has to be limited.</p>

<p>To help us control access to our APIs I have been looking at various API management
platform and how they implement OAuth2 to provide authorized access to an API. The
three I talk about in this post are from <a href="http://www.apigee.com">Apigee</a>, <a href="http://www.mashery.com">Mashery</a> and <a href="http://www.mulesoft.com">Mulesoft</a>.</p>

<h3 id="oauth2">OAuth2</h3>
<p>Before we start I supose it is worth talking a bit about <a href="http://oauth.net/2/">OAuth2</a>. To quote <a href="http://en.wikipedia.org/wiki/OAuth">wikipedia</a>:</p>

<blockquote>
  <p>OAuth is an open standard for authorization. OAuth provides a method for clients
to access server resources on behalf of a resource owner such as a different
client or an end-user. It also provides a process for end-users to authorize
third-party access to their server resources without sharing their credentials,
typically a username and password pair, using user-agent redirections.</p>
</blockquote>

<p>The OAuth2 <a href="http://tools.ietf.org/html/rfc6749">spec</a> is a long and complicated document with many, many options.
To compare the three management platforms I built a simple API hosted on <a href="https://heroku.com/">Heroku</a>.
I also wrote a simple client web app that consumed the API again hosted on Heroku.
Finally I wired in each of the API management platforms to protect the API and
to ensure only authenticated users could use the client.</p>

<p>I used the “Authorization Code” flow to authenticate and authorise the client users,
which means that the client does not need any knowledge of the user’s credentials
and all the authentication and authorization is done on the API side.</p>

<p>At a high level, every API request by the client requires an access token to call a
protected resource. The steps to get an access token are:</p>

<ul>
  <li>the user authenticates themselves using a web application hosted on the API side</li>
  <li>the client application is passed an authorization code via a callback method.
The client exchanges this code for an access token, authenticating itself with a
client ID and secret.</li>
  <li>the client attaches the access token to any API calls</li>
</ul>

<p>Each of the API management platform achieves this in a slightly different way.</p>

<h3 id="mashery">Mashery</h3>
<p>To implement the flow in Mashery I wrote a simple node app that presented a user
a screen to enter their username and password and which validated them. The user
clicks on a link in the client app and is taken to this validation screen.</p>

<p>If the validation succeeds the web app uses a Mashery API to generate an authorization
code and this is passed back to the client via it’s callback url. The client makes a call
to a “token” endpoint configured in the Mashery API and which responds with an access token.
This token is passed with every subsequent API call and the Mashery platform ensures that
it is valid.</p>

<p>This is the implementation I tried last, and it took me very little effort to
change the code a developed using Apigee to work with Mashery.</p>

<h3 id="apigee">Apigee</h3>
<p>Apigee’s approach is slightly different to Mashery. I had to expose three
endpoints in Apigee. The first endpoint redirects to the login application where
the user enters their details. If the details are correct, the login app calls
the second endpoint which generates an authorization code and passes it to the
client app via its callback url. The client then uses the third endpoint to
exchange the code for an access token.</p>

<p>It took me a while to remember how OAuth works, but once I had that the example
from Apigee was easy to follow and I got things up and running pretty quickly.</p>

<h3 id="mulesoft">Mulesoft</h3>
<p>Mulesoft is a relatively new player in the API management space, primarily being
known for their ESB.The biggest difference between the the solution I built with
this and the others was that Mulesoft provided the login application, with no
ability to develop your own. It is relatively simple to plug this login app
into an existing database, and you do have control over how it looks but it does
mean you have to know about <a href="http://projects.spring.io/spring-framework/">Spring</a> and Java (both of which I do). Getting
an access token was easy, and wiring in the API was pretty simple. I did like
that you can run everything on a local machine whilst developing - but it also
required the most technical knowledge to get working.</p>

<h3 id="conclusion">Conclusion</h3>
<p>All three platforms made it simple to implement the required functionality.
Mashery and Apigee’s approach are pretty similar (although the platforms are
quite different), and Mulesoft’s approach also work’s well.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting APIs]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2013/06/27/documenting-apis/"/>
    <updated>2013-06-27T14:37:00+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2013/06/27/documenting-apis</id>
    <content type="html"><![CDATA[<p>One of the projects I am working on at work is revamping our mobile applications.</p>

<p>We are designing a RESTful web service layer that a mobile device will use to allow a customer to do various things.</p>

<p>One of the problems I have is that a third party is going to build the service layer and they need to be told what services the API layer has to expose. The mobile devs also need to know what to expect from the service.</p>

<p>I’ve tried to document everything using Word documents, but I couldn’t really get to a format that I liked. After talking to a few people I decided to try a couple of tools</p>

<h2 id="apiary">Apiary</h2>
<p><a href="http://apiary.io">Apiary</a> allows you to define an API using a simple, Markdown inspired DSL. </p>

<pre><code>HOST: http://shop.acme.com/
--- Sample API v2 ---
---
Welcome to our API. Comments support [Markdown](http://daringfireball.net/projects/markdown/syntax) syntax.
---
-- Shopping Cart Resources --
GET /shopping-cart
&gt; Accept: application/json
&lt; 200
&lt; Content-Type: application/json
{ "items": [
    { "url": "/shopping-cart/1", "product":"2ZY48XPZ", "quantity": 1, "name": "New socks", "price": 1.25 }
  ] }
</code></pre>

<p>It turns this markdown into some nice looking documentation to describe your API. It even lets you call the API from within Apiary and it can stub your API for you as well…</p>

<p>I liked it, but I couldn’t put the level of detail in the documentation that I wanted. I’d also prefer to deploy the documentation with the API not on Apiary’s site.</p>

<h2 id="swagger">Swagger</h2>
<p><a href="https://developers.helloreverb.com/swagger/">Swagger</a> have taken a slightly different approach, or actually several approaches. You can document you api in a number of ways: you can write some json to describe it, you can write java/scala and annotate your code or you can do it in javascript. Either way you end up with a load of json that describes your API.</p>

<p>Swagger-ui can be deployed with the API and renders the json in a nice looking format. You can also use it to call the API, but it doesn’t stub it for you.</p>

<p>You can see a demo <a href="http://petstore.swagger.wordnik.com/">here</a>.</p>

<p>In the end I used swagger, and annotated a Javascript stub that I was writing anyway. I can document everything I need to, and the developers get a nice UI to see what the API does.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook London Hackathon 2012]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/09/22/facebook-london-hackathon-2012/"/>
    <updated>2012-09-22T10:05:34+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/09/22/facebook-london-hackathon-2012</id>
    <content type="html"><![CDATA[<p>Yesterday I went to Facebook’s London office for my first “Hackathon”.</p>

<p>We got started around 0930, and had a few hours of talks from the Facebook team as well as a number of their partners. The guys from Facebook talked to us about Open Graph, mobile development and Facebook games. The talks were a good introduction to Facebook’s various apis that we would be using for during the afternoon’s hacking. Three of Facebook’s partners then gave a very quick overview of their services.</p>

<p>We saw presentations from:</p>

<ul>
  <li><a href="http://www.twilio.com/">Twilio</a>, who provide all sorts of telephony goodness</li>
  <li><a href="http://www.deezer.com/en/">Deezer</a>, a web based music platform</li>
  <li><a href="http://pusher.com">Pusher</a>, a way of doing real time magic</li>
</ul>

<p><img class="right" src="/images/events/hackathon.jpg" title="hackathon" >
Once we’d finished we moved on the hacking. Everybody split into teams and had 7 hours to build something using the technologies discussed in the morning. Various prizes were on offer for the best hacks, they just had to use the Facebook platform.</p>

<p>Ben and I were at a slight disadvantage in that there were only two of us in our team, and we wanted to build something that we could use a work. We had a few ideas over the previous couple of days and decided to build a store visit application. Basically, a customer goes to app’s Facebook page, chooses which store they visited and are asked to submit a review of the store. The review is posted to Open Graph and will appear on the customer’s Facebook timeline. When a customer visits the page of the store, they will see all the reviews for that store and be able to like, comment etc on them.</p>

<p>We also wanted to use Twilio to contact the customer if their review was negative to try to address whatever problem the customer had.</p>

<p>We’re kind of limited to our technology choice seeing as we do things in Java, so we built our app on Tomcat using Spring MVC. We got to the point of posting the customer’s review to Open Graph, but we didn’t really have anything in a fit state to present to the group.</p>

<p>Most of our problems were around our choice of technology. Spring is a great framework, but it can be a bit of a pain to configure properly. I tried to get hibernate working with hsqldb but failed miserably and spent 90 minutes trying to persist our reviews. In the end I gave up, installed mongodb and got it working in about 20 minutes. I used the <a href="http://progrium.com/localtunnel/">localtunnel</a> gem  to allow Facebook access to my dev machine, but it kept on timing out which meant I had to continually reconfigure the app in Facebook. I used <a href="http://twitter.github.com/bootstrap/">bootstrap</a> for the colours and shapes, but it didn’t work properly in the Facebook canvas iframe.</p>

<p>Going forward, I’m going to look at <a href="http://java.heroku.com/">Java Heroku</a> which will remove the need for localtunnel. I need to play with bootstrap to get that to work properly and I will get the persistence layer working before I start when I go to my next hackathon.</p>

<p>All in all, it was a very useful day. I don’t get much chance to code anymore, let alone for 7 hours straight. The facilities provided by Facebook were excellent and all their engineers were very helpful.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Open Graph]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/07/25/facebook-open-graph/"/>
    <updated>2012-07-25T23:12:17+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/07/25/facebook-open-graph</id>
    <content type="html"><![CDATA[<p>I left my job at the Hut Group after 3.5 years and decided to move on to Morrisons to help them develop their online offering. The first thing I did on joining them was look at Open Graph in Facebook for a project they are working on.</p>

<p>Open Graph allows you to specify an action and an object, and do the action to the object. It will put the fact you’ve done this on you Facebook timeline for all your friends to see. On the AutoTrader website for example, you can “want” a car. The demo app from Facebook shows you how to “cook” a recipe. The possibilities are endless.</p>

<p>I found the whole thing really interesting. I got to write some javascript which I’ve not really done much of, and figuring out how to stop a user doing the same action twice was quite challenging. </p>

<p>Testing my app was a bit of a faff, as I was running on a corporate network and you need to allow Facebook access to your website. I managed to get around it by setting up a reverse ssh tunnel to an Amazon EC2 instance and forwarding the web requests from there to my application. It took me a while to get working, but it is actually dead simple once you know what you are doing. </p>

<p>The Facebook documentation is quite good, and the tutorial is really easy to follow. I got two relatively complicated apps going in about three days and I’m not great a javascript…</p>

<p>You can find out more by going to <a href="https://developers.facebook.com/docs/opengraph/tutorial/">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Hut Group's first Code Dojo ]]></title>
    <link href="http://www.landofshattereddreams.com/blog/2012/05/16/the-hut-groups-first-code-dojo/"/>
    <updated>2012-05-16T21:03:02+01:00</updated>
    <id>http://www.landofshattereddreams.com/blog/2012/05/16/the-hut-groups-first-code-dojo</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logos/dojo.jpg"></p>

<p>A couple of years ago, one of our technical architects at the Hut Group ran a few code dojos to give the team experience of TDD and Pair Programming. The team has grown massively in the meantime, so I thought it would be a good opportunity to try it again.</p>

<p>To quote from <a href="http://codingdojo.org/">codingdojo.org</a>, a dojo is:</p>

<blockquote>
  <p>…a meeting where a bunch of coders get together to work on a programming challenge. They are there to have fun and to engage in <a href="http://codingdojo.org/cgi-bin/wiki.pl?DeliberatePractice">DeliberatePractice</a> in order to improve their skills.</p>
</blockquote>

<p>So, I booked the boardroom, setup an Intellij project on my MacBook and waited for the developers to arrive. In the end about 10 people came, with a range of development experience from less than a year, to more than we’d care to admit to.</p>

<p>The exercise I chose for the group was to implement the “fizz buzz” game. Basically for a given natural number greater zero return</p>

<ul>
  <li>
    <p>“fizz” if the number is divisible by 3</p>
  </li>
  <li>
    <p>“buzz” if the number is divisible by 5</p>
  </li>
  <li>
    <p>“fizzbuzz” if the number is divisible by both 3 and 5</p>
  </li>
  <li>
    <p>otherwise return the number</p>
  </li>
</ul>

<p>The first comedy moment was when we went round the table and tried to play “fizz buzz”. You’d have thought a group of highly skilled IT professionals would be able to do simple mental arithmetic, but this is apparently not the case…</p>

<p>The problem itself isn’t all that complicated, a decent developer could write the code in 5 minutes, but the point of the exercise isn’t really the end solution. More important is how you get to it. A pair of developers worked at the laptop. The driver types, focuses on tactics and writing clean code that compiles and runs. The navigator focuses on strategy. How the code fits into the overall design, which tests will drive the code forward, and which refactorings will improve the entire codebase.</p>

<p>We also wanted to build the solution using Test Driven Development. You write a test that fails, write some code to make it pass and then refactor. With a problem this simple it is quite difficult to force yourself to follow these steps.</p>

<p>We started with the simplest case we could think of, i.e. if you pass in 1, you get 1 back and built from there. We managed 7 iterations in the time we had available and got to a reasonable solution.</p>

<p>Going through the exercise prompted a lot of interesting debate. We talked about how you identify test cases, different ways of implementing the algorithm and even got into some OO design. I think the group found the exercise useful, I guess the proof will be when I see how many people come to the second code dojo.</p>

<p>There was one thing that I didn’t think worked too well. The navigator didn’t really get to contribute as the entire group chipped in ideas so effectively we had 10 navigators, but I’m not sure if this wasn’t a good thing.</p>

<p>Next time I may try using <a href="http://www.cyber-dojo.com/">cyber-dojo</a> which would allow pairs to work at the same time. It is a pretty neat site where you select a exercise and can code it online in a huge number of languages. One thing it does prove is that Java is a bit of a nightmare without an IDE, Ruby is the future!</p>
]]></content>
  </entry>
  
</feed>
